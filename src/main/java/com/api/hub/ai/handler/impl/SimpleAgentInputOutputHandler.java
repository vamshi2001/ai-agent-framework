package com.api.hub.ai.handler.impl;

import org.springframework.beans.factory.config.ConfigurableBeanFactory;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Component;

import com.api.hub.ai.constants.MarkerConstants;
import com.api.hub.ai.handler.InputOutputHandler;

import lombok.extern.slf4j.Slf4j;

/**
 * {@code SimpleAgentInputOutputHandler} is a concrete implementation of {@link InputOutputHandler}
 * used within the AI-Agent Framework to facilitate communication between the agent and the user/environment.
 *
 * <p>This class handles the flow of input and output messages between the AI agent and its environment,
 * as well as tracks the agent's execution status. It also logs key events for auditing purposes using
 * the {@code AUDIT} marker from {@link MarkerConstants}.</p>
 *
 * <p><b>Scope:</b> This class is defined with prototype scope, meaning a new instance is created
 * for each agent execution to maintain isolation of input, output, and state data.</p>
 *
 * <p><b>Responsibilities:</b></p>
 * <ul>
 *   <li>Stores and logs input received from the environment via {@link #setInput(String)}</li>
 *   <li>Captures and logs the output message from the agent via {@link #setOutPut(String)}</li>
 *   <li>Links the current {@link EnvironmentState} to the handler</li>
 *   <li>Tracks whether the agent successfully completed its operation</li>
 * </ul>
 *
 * @author 
 * @since 1.0
 * @see InputOutputHandler
 * @see EnvironmentState
 * @see MarkerConstants
 */
@Component("SimpleAgentInputOutputHandler")
@Scope(value = ConfigurableBeanFactory.SCOPE_PROTOTYPE)
@Slf4j
public class SimpleAgentInputOutputHandler implements InputOutputHandler, MarkerConstants {

    /** Input message received from the environment */
    String inputmsg;

    /** Output message generated by the agent */
    String outPutmsg;

    /** The environment state associated with the current agent execution */
    EnvironmentState state;

    /** Success status of the last task or goal execution */
    boolean isSuccess = false;

    /**
     * Sets the input string received from the environment and logs it.
     *
     * @param input The user or environment input to be processed by the agent.
     */
    @Override
    public void setInput(String input) {
        log.info(AUDIT, "input msg - " + input + " received from env - " + state.getId());
        this.inputmsg = input;
    }

    /**
     * Sets the output string to be sent back to the user and logs it.
     *
     * @param output The response message generated by the agent.
     */
    @Override
    public void setOutPut(String output) {
        log.info(AUDIT, "response msg - " + output + " sending to user from env - " + state.getId());
        this.outPutmsg = output;
    }

    /**
     * Returns the last output message generated by the agent.
     *
     * @return The output message.
     */
    @Override
    public String getOut() {
        return outPutmsg;
    }

    /**
     * Associates the current {@link EnvironmentState} with the agent execution.
     *
     * @param state The environment state object.
     */
    @Override
    public void setState(EnvironmentState state) {
        this.state = state;
    }

    /**
     * Sets the success status of the agent's execution.
     *
     * @param isSuccess {@code true} if the agent task/goal was successful; otherwise {@code false}.
     */
    @Override
    public void status(boolean isSuccess) {
        this.isSuccess = isSuccess;
    }

    /**
     * Returns the status of the last executed agent operation.
     *
     * @return {@code true} if successful; otherwise {@code false}.
     */
    @Override
    public boolean isSuccess() {
        return isSuccess;
    }
}